name: build-script
on:
  workflow_dispatch:
    inputs:
      check_run_id:
        description: Check Run ID
        required: false
  schedule:
    - cron: '0 22 * * 1'

jobs:

  check-in:
    name: Check In
    runs-on: ubuntu-latest
    if: github.event.inputs.check_run_id

    steps:  
      - name: Get Current Run
        id: get_run
        run: |
          set -e
          
          http_code=$(curl -s -o run.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }})
      
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to fetch run ${{ github.run_id }}"
            exit 1
          fi
          
          HTML_URL=$(jq -r '.html_url' run.json)
          
          echo "Run HTML URL: $HTML_URL"          
          echo "::set-output name=html_url::$HTML_URL"

      - name: Update CI Check
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"status":"in_progress","details_url":"${{ steps.get_run.outputs.html_url }}"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

  build-script:
    name: Check Build Script
    runs-on: windows-latest
    needs: [check-in]
    if: cancelled() == false
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        branch: [main, 5.4, 5.3]
        spec: [apple, readdle]
        include:
          - spec: apple
            enable-no-objc-patch: NO
            stdlib-patch-enabled: NO
          - spec: readdle
            enable-no-objc-patch: YES
            stdlib-patch-enabled: YES
          - branch: main
            python-version: 3.7.x
          - branch: 5.4
            python-version: 3.7.x
          - branch: 5.3
            python-version: 2.7.x

    steps:
      - name: Checkout 
        uses: actions/checkout@v2

      - name: Use Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get CMake 3.19.2
        uses: lukka/get-cmake@v3.19.2

      - name: Install VS 16.9
        if: matrix.branch == 5.3
        run: |
          "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vs_installer.exe" modify --quiet --norestart --nocache ^
           --installPath="%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Enterprise" ^
           --add Microsoft.VisualStudio.Component.VC.14.28.16.9.x86.x64 ^
           --add Microsoft.VisualStudio.Component.VC.14.28.16.9.ATL
          
          if errorlevel 1 exit /b
          
          :check_setup
          tasklist | find /I "setup.exe" > nul
          if not errorlevel 1 (
            echo Waiting for setup to complete...
            ping -n 10 127.0.0.1 > nul
            goto check_setup
          )
          exit /b 0

      - name: Prepare Build Drive
        run: |
          call scripts\tools\get-free-drive.cmd
          subst %SW_FREE_DRIVE% ${{ github.workspace }}
          echo SW_WORK_DIR=%SW_FREE_DRIVE%>>%GITHUB_ENV%

      - name: Configure
        run: |
          subst

          scripts\configure.cmd^
           --interactive=NO^
           --branch ${{ matrix.branch }}^
           --sources-dir %SW_WORK_DIR%\s^
           --build-dir %SW_WORK_DIR%\b^
           --install-dir %SW_WORK_DIR%\i^
           --skip-toolchain-swift-test=YES^
           --skip-sdk-dispatch-test=YES^
           --skip-sdk-foundation-test=YES^
           --enable-no-objc-patch=${{ matrix.enable-no-objc-patch}}^
           --enable-print-patch=${{ matrix.stdlib-patch-enabled }}

      - name: Build
        run: |
          if "${{ matrix.branch }}"=="5.3" set SW_VC_VERSION=14.28.29910
          scripts\build.cmd

      - name: Remove Build Drive
        if: always()
        run: subst /d %SW_WORK_DIR%

  check-out:
    name: Check Out
    runs-on: ubuntu-latest
    if: always()
    needs: [check-in, build-script]

    steps:
      - name: Update CI Check - Success
        if: github.event.inputs.check_run_id && needs.curl.result == 'success'
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"conclusion":"success"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

      - name: Update CI Check - Failure
        if: github.event.inputs.check_run_id && contains(needs.*.result, 'failure')
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"conclusion":"failure"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

      - name: Update CI Check - Cancelled
        if: github.event.inputs.check_run_id && contains(needs.*.result, 'cancelled')
        env:
          CHECK_RUN_ID: ${{ github.event.inputs.check_run_id }}
        run: |
          set -e
          
          http_code=$(curl -s -o check.json -w "%{http_code}" -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' \
            -X PATCH https://api.github.com/repos/${{ github.repository }}/check-runs/$CHECK_RUN_ID \
            -d '{"conclusion":"cancelled"}')
          
          echo $http_code
          if [ "$http_code" != "200" ]; then
            echo "::error::Failed to update check run"
            exit 1
          fi

      - name: Update Badge - Success
        uses: schneegans/dynamic-badges-action@v1.0.0
        if: github.ref == 'refs/heads/master' && needs.curl.result == 'success'
        with:
          auth: ${{ secrets.GISTS_TOKEN }}
          gistID: e75dcdc92f031e71745ff1dbb56decd4
          filename: ${{ github.workflow }}-badge.json
          label: ${{ github.workflow }}
          message: success
          color: success

      - name: Update Badge - Failure
        uses: schneegans/dynamic-badges-action@v1.0.0
        if: github.ref == 'refs/heads/master' && contains(needs.*.result, 'failure')
        with:
          auth: ${{ secrets.GISTS_TOKEN }}
          gistID: e75dcdc92f031e71745ff1dbb56decd4
          filename: ${{ github.workflow }}-badge.json
          label: ${{ github.workflow }}
          message: failure
          color: critical
